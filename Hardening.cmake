include(CheckCXXCompilerFlag)

function(add_strip_command target)
  get_target_property(runtime_dir ${target} RUNTIME_OUTPUT_DIRECTORY)
  set(command ${CMAKE_STRIP} ${runtime_dir}/${target})
  if (CMAKE_BUILD_TYPE STREQUAL "Release")
    add_custom_command(TARGET ${target} POST_BUILD
                       COMMAND ${command}
                       COMMAND_EXPAND_LISTS)
  endif()
endfunction()

function(enable_hardening target global ubsan_minrt)
  message(STATUS "Enabling hardening (Target ${target}).")
  if (MSVC)
    set(new_compiler_options " /sdl /DYNAMICBASE /guard:cf")
    set(new_linker_options " /NXCOMPAT /CETCOMPAT")
    message(STATUS "MSVC additional flags: compiler ${new_compiler_options} linker ${new_linker_options}")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES ".*Clang|GNU")
    set(new_cxx_definitions " -D_GLIBCXX_ASSERTIONS")
    message(STATUS "glibc++ assertion (vector, string, ...) enabled")
    set(new_compiler_options "${new_compiler_options} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3")
    message(STATUS "clang/g++ _FORTIFY_SOURCE=3 enabled")

    check_cxx_compiler_flag(-fstack-protector-strong stack_protector)
    if (stack_protector)
      set(new_compiler_options "${new_compiler_options} -fstack-protector-strong")
      message(STATUS "clang/g++ -fstack-protector-strong enabled")
    else()
      message(STATUS "clang/g++ -fstack-protector-strong not enabled (not supported)")
    endif()

    check_cxx_compiler_flag(-fcf-protection cf_protection)
    if (cf_protection)
      set(new_compiler_options "${new_compiler_options} -fcf-protection")
      message(STATUS "clang/g++ -fcf-protection enabled")
    else()
      message(STATUS "clang/g++ -fcf-protection not enabled (not supported)")
    endif()

    check_cxx_compiler_flag(-fstack-clash-protection clash_protection)
    if (clash_protection)
      set(new_compiler_options "${new_compiler_options} -fstack-clash-protection")
      message(STATUS "clang/g++ -fcf-protection enabled")
    else()
      message(STATUS "clang/g++ -fstack-clash-protection not enabled (not supported)")
    endif()

    # check_cxx_compiler_flag(-fPIE pie)
    # if (pie)
    #   set(new_compiler_options "${new_compiler_options} -fPIE")
    #   message(STATUS "clang/g++ -fPIE enabled")
    # else()
    #   message(STATUS "clang/g++ -fPIE not enabled (not supported)")
    # endif()
  endif()

  if (${ubsan_minrt})
    check_cxx_compiler_flag("-fsanitize=undefined -fno-sanitize-recover=undefined -fsanitize-minimal-runtime"
                            minimal_runtime)
    if (minimal_runtime)
      set(new_compiler_options "${new_compiler_options} -fsanitize=undefined -fsanitize-minimal-runtime")
      set(new_linker_options "${new_linker_options} -fsanitize=undefined -fsanitize-minimal-runtime")
      if (NOT ${global})
        set(new_compiler_options "${new_compiler_options} -fno-sanitize-recover=undefined")
        set(new_linker_options "${new_linker_options} -fno-sanitize-recover=undefined")
      else()
        message(STATUS "not enabling -fno-sanitize-recover=undefined for global consumption")
      endif()
      message(STATUS "ubsan minimal runtime enabled")
    else()
      message(STATUS "ubsan minimal runtime not enabled (not supported)")
    endif()
  else()
    message(STATUS "ubsan minimal runtime not enabled (not required)")
  endif()

  message(STATUS "hardening compiler flags: ${new_compiler_options}")
  message(STATUS "hardening linker flags: ${new_linker_options}")
  message(STATUS "hardening compiler defines: ${new_cxx_definitions}")

  if (${global})
    message(STATUS "setting hardening options globally for all dependencies")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${new_compiler_options}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${new_cxx_definitions}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${new_linker_options}")
  else()
    target_compile_options(${target} INTERFACE ${new_compiler_options})
    target_link_options(${target} INTERFACE ${new_linker_options})
    target_compile_definitions(${target} INTERFACE ${new_cxx_definitions})
  endif()
endfunction()
